import logging
from contextlib import suppress

from aiogram import Bot, Router
from aiogram.enums import BotCommandScopeType
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import KICKED, ChatMemberUpdatedFilter, Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import BotCommandScopeChat, ChatMemberUpdated, Message, FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from app.bot.enums.roles import UserRole
from app.bot.keyboards.menu_button import get_main_menu_commands
from app.bot.states.states import LangSG, SupportSG
from app.infrastructure.database.db import (
    add_user,
    change_user_alive_status,
    get_user,
    get_user_lang,
)
from psycopg.connection_async import AsyncConnection

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä —É—Ä–æ–≤–Ω—è –º–æ–¥—É–ª—è
user_router = Router()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@user_router.message(CommandStart())
async def process_start_command(
    message: Message, 
    conn: AsyncConnection, 
    bot: Bot, 
    i18n: dict[str, str], 
    state: FSMContext, 
    admin_ids: list[int],
    translations: dict
):
    user_row = await get_user(conn, user_id=message.from_user.id)
    if user_row is None:
        if message.from_user.id in admin_ids:
            user_role = UserRole.ADMIN
        else:
            user_role = UserRole.USER

        await add_user(
            conn,
            user_id=message.from_user.id,
            username=message.from_user.username,
            language=message.from_user.language_code,
            role=user_role
        )
    else:
        user_role = UserRole(user_row[4])
        await change_user_alive_status(
            conn, 
            is_alive=True, 
            user_id=message.from_user.id, 
        )

    if await state.get_state() == LangSG.lang:
        data = await state.get_data()
        with suppress(TelegramBadRequest):
            msg_id = data.get("lang_settings_msg_id")
            if msg_id:
                await bot.edit_message_reply_markup(chat_id=message.from_user.id, message_id=msg_id)
        user_lang = await get_user_lang(conn, user_id=message.from_user.id)
        i18n = translations.get(user_lang)
    
    await bot.set_my_commands(
        commands=get_main_menu_commands(i18n=i18n, role=user_role),
        scope=BotCommandScopeChat(
            type=BotCommandScopeType.CHAT,
            chat_id=message.from_user.id
        )
    )

    await message.answer(text=i18n.get("/start"))
    await state.clear()


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help
@user_router.message(Command(commands="help"))
async def process_help_command(message: Message, i18n: dict[str, str]):
    await message.answer(text=i18n.get("/help"))


# –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@user_router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=KICKED))
async def process_user_blocked_bot(event: ChatMemberUpdated, conn: AsyncConnection):
    logger.info("User %d has blocked the bot", event.from_user.id)
    await change_user_alive_status(conn, user_id=event.from_user.id, is_alive=False)


@user_router.message(Command(commands="get_bonus"))
async def process_get_bonus_command(message: Message, i18n: dict[str, str]):
    pdf_path = ""

    document = FSInputFile(pdf_path, filename="–ë–æ–Ω—É—Å.pdf")

    await message.answer_document(
        document=document,
        caption=i18n.get("–í–æ—Ç –≤–∞—à –±–æ–Ω—É—Å üéÅ")
    )

@user_router.message(Command(commands="signup_lesson"))
async def process_signup_lesson_command(message: Message, i18n: dict[str, str]):
    google_form_url = ""
    
    await message.answer(
    i18n["form_text"].format(url=google_form_url),
    parse_mode="HTML",
    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=i18n["form_button"], url=google_form_url)]
    ])
)
    
@user_router.message(Command(commands="about_malina"))
async def process_about_malina(message: Message, i18n: dict[str, str]):
    text_about = ""


@user_router.message(Command(commands="contact_admin"))
async def process_contact_admin(
    message: Message, 
    state: FSMContext,
    i18n: dict[str, str]
    ):
    await message.answer(
        i18n.get("contact_admin_start", 
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
    )

    await state.set_state(SupportSG.waiting_for_message)

@user_router.message(SupportSG.waiting_for_message)
async def process_support_message(
    message: Message, 
    state: FSMContext,
    bot: Bot,
    admin_id: int,
    i18n: dict[str, str]
):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    try:
        admin_text = (
            f"<b>üì© –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
            f"üÜî <code>{user_id}</code>\n"
            f"üë§ <b>{full_name}</b>\n"
            f"üîó @{username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:"
        )
        await bot.send_message(admin_id, admin_text, parse_mode="HTML")

        await message.forward(admin_id)

        reply_markup = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é",
                callback_data=f"reply_{user_id}"
            )]
        ])
        await bot.send_message(
            admin_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    await message.answer(
        i18n.get("contact_admin_success", "‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞."),
    )
    await state.clear()


@user_router.message(
    lambda m: m.text and m.text.startswith("/reply_") and m.from_user.id == m.bot.workflow_data['admin_id']
)
async def process_admin_reply(message: Message, bot: Bot, i18n: dict[str, str]):
    try:
        parts = message.text.split(" ", 1)
        target_id = int(parts[0].split("_")[1])
        reply_text = parts[1].strip()

        if len(reply_text) < 2:
            await message.answer("‚ùå –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.")
            return

        await bot.send_message(
            target_id,
            f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{reply_text}",
        )
        await message.answer("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except (IndexError, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/reply_123456789 —Ç–µ–∫—Å—Ç`", parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

